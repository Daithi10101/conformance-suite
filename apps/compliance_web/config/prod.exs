use Mix.Config

if System.get_env("DEBUG_ENVS") == true || System.get_env("DEBUG_ENVS") == "true" do
  IO.inspect(
    System.get_env("ENDPOINT_URL_HOST"),
    label: "env[apps/compliance_web/config/prod.exs] => ENDPOINT_URL_HOST"
  )

  IO.inspect(
    System.get_env("ENDPOINT_URL_PORT"),
    label: "env[apps/compliance_web/config/prod.exs] => ENDPOINT_URL_PORT"
  )
end

# For production, we often load configuration from external
# sources, such as your system environment. For this reason,
# you won't find the :http configuration below, but set inside
# ComplianceWeb.Endpoint.init/2 when load_from_system_env is
# true. Any dynamic configuration should be done there.
#
# Don't forget to configure the url host to something meaningful,
# Phoenix uses this information when generating URLs.
#
# Finally, we also include the path to a cache manifest
# containing the digested version of static files. This
# manifest is generated by the mix phx.digest task
# which you typically run after static files are built.
config :compliance_web, ComplianceWeb.Endpoint,
  http: [port: System.get_env("ENDPOINT_URL_PORT") || 80],
  server: true,
  root: ".",
  version: Application.spec(:compliance_web, :vsn),
  load_from_system_env: true,
  url: [
    host: System.get_env("ENDPOINT_URL_HOST") || "localhost",
    port: System.get_env("ENDPOINT_URL_PORT") || 80
  ],
  cache_static_manifest: "priv/static/cache_manifest.json",
  debug_errors: true,
  code_reloader: false,
  check_origin: true,
  secret_key_base: "rOoQVTyg8RcA6RmLEhX0Fs86GYUvA3ufMCBcunLoiTCA0MNqVBRssHOJpfskMe+9"

# ## SSL Support
#
# To get SSL working, you will need to add the `https` key
# to the previous section and set your `:url` port to 443:
#
#     config :compliance_web, ComplianceWeb.Endpoint,
#       ...
#       url: [host: "example.com", port: 443],
#       https: [:inet6,
#               port: 443,
#               keyfile: System.get_env("SOME_APP_SSL_KEY_PATH"),
#               certfile: System.get_env("SOME_APP_SSL_CERT_PATH")]
#
# Where those two env variables return an absolute path to
# the key and cert in disk or a relative path inside priv,
# for example "priv/ssl/server.key".
#
# We also recommend setting `force_ssl`, ensuring no data is
# ever sent via http, always redirecting to https:
#
#     config :compliance_web, ComplianceWeb.Endpoint,
#       force_ssl: [hsts: true]
#
# Check `Plug.SSL` for all available options in `force_ssl`.

# ## Using releases
#
# If you are doing OTP releases, you need to instruct Phoenix
# to start the server for all endpoints:
#
#     config :phoenix, :serve_endpoints, true
#
# Alternatively, you can configure exactly which server to
# start per endpoint:
#
#     config :compliance_web, ComplianceWeb.Endpoint, server: true
#

# config :compliance_web, ComplianceWeb.Endpoint, secret_key_base: System.get_env("SECRET_KEY_BASE")

# see config options: https://github.com/scrogson/oauth2#debug-mode
# this is the library being used behind the scenes by Ueberauth
config :oauth2, debug: true

# Configure Google OAuth
config :ueberauth, Ueberauth.Strategy.Google.OAuth,
  client_id: System.get_env("GOOGLE_OAUTH_CLIENT_ID"),
  client_secret: System.get_env("GOOGLE_OAUTH_CLIENT_SECRET")

# Configure Guardian
config :compliance_web, ComplianceWeb.Guardian,
  issuer: "compliance_web",
  secret_key: System.get_env("GUARDIAN_SECRET_KEY")
