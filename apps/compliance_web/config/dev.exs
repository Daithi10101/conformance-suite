use Mix.Config

# For development, we disable any cache and enable
# debugging and code reloading.
#
# The watchers configuration can be used to run external
# watchers to your application. For example, we use it
# with brunch.io to recompile .js and .css sources.
config :compliance_web, ComplianceWeb.Endpoint,
  http: [port: 4000],
  debug_errors: true,
  code_reloader: true,
  check_origin: false,
  watchers: [
    node: [
      "node_modules/.bin/webpack",
      "--labeled-modules",
      "--hide-modules",
      "-d",
      # "--display=errors-only",
      "--display=normal",
      "--colors",
      "--watch-stdin",
      "--config",
      "build/webpack.dev.conf.js",
      cd: Path.expand("../assets", __DIR__)
    ]
  ]

# ## SSL Support
#
# In order to use HTTPS in development, a self-signed
# certificate can be generated by running the following
# command from your terminal:
#
#     openssl req -new -newkey rsa:4096 -days 365 -nodes -x509 -subj "/C=US/ST=Denial/L=Springfield/O=Dis/CN=www.example.com" -keyout priv/server.key -out priv/server.pem
#
# The `http:` config above can be replaced with:
#
#     https: [port: 4000, keyfile: "priv/server.key", certfile: "priv/server.pem"],
#
# If desired, both `http:` and `https:` keys can be
# configured to run both http and https servers on
# different ports.

# Watch static and templates for browser reloading.
config :compliance_web, ComplianceWeb.Endpoint,
  live_reload: [
    patterns: [
      ~r{priv/static/.*(js|css|png|jpeg|jpg|gif|svg)$},
      ~r{priv/gettext/.*(po)$},
      ~r{lib/compliance_web/views/.*(ex)$},
      ~r{lib/compliance_web/templates/.*(eex)$}
    ]
  ]

# see config options: https://github.com/scrogson/oauth2#debug-mode
# this is the library being used behind the scenes by Ueberauth
config :oauth2, debug: true

# Configure Google OAuth
config :ueberauth, Ueberauth.Strategy.Google.OAuth,
  client_id: System.get_env("GOOGLE_OAUTH_CLIENT_ID"),
  client_secret: System.get_env("GOOGLE_OAUTH_CLIENT_SECRET")

# Configure Guardian
config :compliance_web, ComplianceWeb.Guardian,
  issuer: "compliance_web",
  secret_key: System.get_env("GUARDIAN_SECRET_KEY")
