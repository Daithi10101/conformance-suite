// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import authentication "bitbucket.org/openbankingteam/conformance-suite/pkg/authentication"
import discovery "bitbucket.org/openbankingteam/conformance-suite/pkg/discovery"
import generation "bitbucket.org/openbankingteam/conformance-suite/pkg/generation"
import mock "github.com/stretchr/testify/mock"
import reporting "bitbucket.org/openbankingteam/conformance-suite/pkg/reporting"
import server "bitbucket.org/openbankingteam/conformance-suite/pkg/server"

// Journey is an autogenerated mock type for the Journey type
type Journey struct {
	mock.Mock
}

// CertificateSigning provides a mock function with given fields:
func (_m *Journey) CertificateSigning() authentication.Certificate {
	ret := _m.Called()

	var r0 authentication.Certificate
	if rf, ok := ret.Get(0).(func() authentication.Certificate); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(authentication.Certificate)
		}
	}

	return r0
}

// CertificateTransport provides a mock function with given fields:
func (_m *Journey) CertificateTransport() authentication.Certificate {
	ret := _m.Called()

	var r0 authentication.Certificate
	if rf, ok := ret.Get(0).(func() authentication.Certificate); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(authentication.Certificate)
		}
	}

	return r0
}

// DiscoveryModel provides a mock function with given fields:
func (_m *Journey) DiscoveryModel() *discovery.Model {
	ret := _m.Called()

	var r0 *discovery.Model
	if rf, ok := ret.Get(0).(func() *discovery.Model); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*discovery.Model)
		}
	}

	return r0
}

// RunTests provides a mock function with given fields:
func (_m *Journey) RunTests() (reporting.Result, error) {
	ret := _m.Called()

	var r0 reporting.Result
	if rf, ok := ret.Get(0).(func() reporting.Result); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(reporting.Result)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SetCertificateSigning provides a mock function with given fields: certificateSigning
func (_m *Journey) SetCertificateSigning(certificateSigning authentication.Certificate) server.Journey {
	ret := _m.Called(certificateSigning)

	var r0 server.Journey
	if rf, ok := ret.Get(0).(func(authentication.Certificate) server.Journey); ok {
		r0 = rf(certificateSigning)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(server.Journey)
		}
	}

	return r0
}

// SetCertificateTransport provides a mock function with given fields: certificateTransport
func (_m *Journey) SetCertificateTransport(certificateTransport authentication.Certificate) server.Journey {
	ret := _m.Called(certificateTransport)

	var r0 server.Journey
	if rf, ok := ret.Get(0).(func(authentication.Certificate) server.Journey); ok {
		r0 = rf(certificateTransport)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(server.Journey)
		}
	}

	return r0
}

// SetDiscoveryModel provides a mock function with given fields: discoveryModel
func (_m *Journey) SetDiscoveryModel(discoveryModel *discovery.Model) (discovery.ValidationFailures, error) {
	ret := _m.Called(discoveryModel)

	var r0 discovery.ValidationFailures
	if rf, ok := ret.Get(0).(func(*discovery.Model) discovery.ValidationFailures); ok {
		r0 = rf(discoveryModel)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(discovery.ValidationFailures)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*discovery.Model) error); ok {
		r1 = rf(discoveryModel)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TestCases provides a mock function with given fields:
func (_m *Journey) TestCases() ([]generation.SpecificationTestCases, error) {
	ret := _m.Called()

	var r0 []generation.SpecificationTestCases
	if rf, ok := ret.Get(0).(func() []generation.SpecificationTestCases); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]generation.SpecificationTestCases)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
